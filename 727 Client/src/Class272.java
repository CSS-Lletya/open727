/* Class272 - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */

public class Class272 {
	static int anInt3331;

	public static byte[][][] method4831(int i) {
		byte[][][] is = new byte[8][4][];
		int i_0_ = i;
		int i_1_ = i;
		byte[] is_2_ = new byte[i_0_ * i_1_];
		int i_3_ = 0;
		for (int i_4_ = 0; i_4_ < i_1_; i_4_++) {
			for (int i_5_ = 0; i_5_ < i_0_; i_5_++) {
				if (i_5_ <= i_4_)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[0][0] = is_2_;
		is_2_ = new byte[i_1_ * i_0_];
		i_3_ = 0;
		for (int i_6_ = i_1_ - 1; i_6_ >= 0; i_6_--) {
			for (int i_7_ = 0; i_7_ < i_1_; i_7_++) {
				if (i_7_ <= i_6_)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[0][1] = is_2_;
		is_2_ = new byte[i_1_ * i_0_];
		i_3_ = 0;
		for (int i_8_ = 0; i_8_ < i_1_; i_8_++) {
			for (int i_9_ = 0; i_9_ < i_0_; i_9_++) {
				if (i_9_ >= i_8_)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[0][2] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_10_ = i_1_ - 1; i_10_ >= 0; i_10_--) {
			for (int i_11_ = 0; i_11_ < i_0_; i_11_++) {
				if (i_11_ >= i_10_)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[0][3] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_12_ = i_1_ - 1; i_12_ >= 0; i_12_--) {
			for (int i_13_ = 0; i_13_ < i_0_; i_13_++) {
				if (i_13_ <= i_12_ >> 1)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[1][0] = is_2_;
		is_2_ = new byte[i_1_ * i_0_];
		i_3_ = 0;
		for (int i_14_ = 0; i_14_ < i_1_; i_14_++) {
			for (int i_15_ = 0; i_15_ < i_0_; i_15_++) {
				if (i_3_ < 0 || i_3_ >= is_2_.length)
					i_3_++;
				else {
					if (i_15_ >= i_14_ << 1)
						is_2_[i_3_] = (byte) -1;
					i_3_++;
				}
			}
		}
		is[1][1] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_16_ = 0; i_16_ < i_1_; i_16_++) {
			for (int i_17_ = i_0_ - 1; i_17_ >= 0; i_17_--) {
				if (i_17_ <= i_16_ >> 1)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[1][2] = is_2_;
		is_2_ = new byte[i_1_ * i_0_];
		i_3_ = 0;
		for (int i_18_ = i_1_ - 1; i_18_ >= 0; i_18_--) {
			for (int i_19_ = i_0_ - 1; i_19_ >= 0; i_19_--) {
				if (i_19_ >= i_18_ << 1)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[1][3] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_20_ = i_1_ - 1; i_20_ >= 0; i_20_--) {
			for (int i_21_ = i_0_ - 1; i_21_ >= 0; i_21_--) {
				if (i_21_ <= i_20_ >> 1)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[2][0] = is_2_;
		is_2_ = new byte[i_1_ * i_0_];
		i_3_ = 0;
		for (int i_22_ = i_1_ - 1; i_22_ >= 0; i_22_--) {
			for (int i_23_ = 0; i_23_ < i_0_; i_23_++) {
				if (i_23_ >= i_22_ << 1)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[2][1] = is_2_;
		is_2_ = new byte[i_1_ * i_0_];
		i_3_ = 0;
		for (int i_24_ = 0; i_24_ < i_1_; i_24_++) {
			for (int i_25_ = 0; i_25_ < i_0_; i_25_++) {
				if (i_25_ <= i_24_ >> 1)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[2][2] = is_2_;
		is_2_ = new byte[i_1_ * i_0_];
		i_3_ = 0;
		for (int i_26_ = 0; i_26_ < i_1_; i_26_++) {
			for (int i_27_ = i_0_ - 1; i_27_ >= 0; i_27_--) {
				if (i_27_ >= i_26_ << 1)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[2][3] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_28_ = i_1_ - 1; i_28_ >= 0; i_28_--) {
			for (int i_29_ = 0; i_29_ < i_0_; i_29_++) {
				if (i_29_ >= i_28_ >> 1)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[3][0] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_30_ = 0; i_30_ < i_1_; i_30_++) {
			for (int i_31_ = 0; i_31_ < i_0_; i_31_++) {
				if (i_31_ <= i_30_ << 1)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[3][1] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_32_ = 0; i_32_ < i_1_; i_32_++) {
			for (int i_33_ = i_0_ - 1; i_33_ >= 0; i_33_--) {
				if (i_33_ >= i_32_ >> 1)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[3][2] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_34_ = i_1_ - 1; i_34_ >= 0; i_34_--) {
			for (int i_35_ = i_0_ - 1; i_35_ >= 0; i_35_--) {
				if (i_35_ <= i_34_ << 1)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[3][3] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_36_ = i_1_ - 1; i_36_ >= 0; i_36_--) {
			for (int i_37_ = i_0_ - 1; i_37_ >= 0; i_37_--) {
				if (i_37_ >= i_36_ >> 1)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[4][0] = is_2_;
		is_2_ = new byte[i_1_ * i_0_];
		i_3_ = 0;
		for (int i_38_ = i_1_ - 1; i_38_ >= 0; i_38_--) {
			for (int i_39_ = 0; i_39_ < i_0_; i_39_++) {
				if (i_39_ <= i_38_ << 1)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[4][1] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_40_ = 0; i_40_ < i_1_; i_40_++) {
			for (int i_41_ = 0; i_41_ < i_0_; i_41_++) {
				if (i_41_ >= i_40_ >> 1)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[4][2] = is_2_;
		is_2_ = new byte[i_1_ * i_0_];
		i_3_ = 0;
		for (int i_42_ = 0; i_42_ < i_1_; i_42_++) {
			for (int i_43_ = i_0_ - 1; i_43_ >= 0; i_43_--) {
				if (i_43_ <= i_42_ << 1)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[4][3] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_44_ = 0; i_44_ < i_1_; i_44_++) {
			for (int i_45_ = 0; i_45_ < i_0_; i_45_++) {
				if (i_45_ <= i_0_ / 2)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[5][0] = is_2_;
		is_2_ = new byte[i_1_ * i_0_];
		i_3_ = 0;
		for (int i_46_ = 0; i_46_ < i_1_; i_46_++) {
			for (int i_47_ = 0; i_47_ < i_0_; i_47_++) {
				if (i_46_ <= i_1_ / 2)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[5][1] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_48_ = 0; i_48_ < i_1_; i_48_++) {
			for (int i_49_ = 0; i_49_ < i_0_; i_49_++) {
				if (i_49_ >= i_0_ / 2)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[5][2] = is_2_;
		is_2_ = new byte[i_1_ * i_0_];
		i_3_ = 0;
		for (int i_50_ = 0; i_50_ < i_1_; i_50_++) {
			for (int i_51_ = 0; i_51_ < i_0_; i_51_++) {
				if (i_50_ >= i_1_ / 2)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[5][3] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_52_ = 0; i_52_ < i_1_; i_52_++) {
			for (int i_53_ = 0; i_53_ < i_0_; i_53_++) {
				if (i_53_ <= i_52_ - i_1_ / 2)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[6][0] = is_2_;
		is_2_ = new byte[i_1_ * i_0_];
		i_3_ = 0;
		for (int i_54_ = i_1_ - 1; i_54_ >= 0; i_54_--) {
			for (int i_55_ = 0; i_55_ < i_0_; i_55_++) {
				if (i_55_ <= i_54_ - i_1_ / 2)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[6][1] = is_2_;
		is_2_ = new byte[i_1_ * i_0_];
		i_3_ = 0;
		for (int i_56_ = i_1_ - 1; i_56_ >= 0; i_56_--) {
			for (int i_57_ = i_0_ - 1; i_57_ >= 0; i_57_--) {
				if (i_57_ <= i_56_ - i_1_ / 2)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[6][2] = is_2_;
		is_2_ = new byte[i_1_ * i_0_];
		i_3_ = 0;
		for (int i_58_ = 0; i_58_ < i_1_; i_58_++) {
			for (int i_59_ = i_0_ - 1; i_59_ >= 0; i_59_--) {
				if (i_59_ <= i_58_ - i_1_ / 2)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[6][3] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_60_ = 0; i_60_ < i_1_; i_60_++) {
			for (int i_61_ = 0; i_61_ < i_0_; i_61_++) {
				if (i_61_ >= i_60_ - i_1_ / 2)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[7][0] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_62_ = i_1_ - 1; i_62_ >= 0; i_62_--) {
			for (int i_63_ = 0; i_63_ < i_0_; i_63_++) {
				if (i_63_ >= i_62_ - i_1_ / 2)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[7][1] = is_2_;
		is_2_ = new byte[i_1_ * i_0_];
		i_3_ = 0;
		for (int i_64_ = i_1_ - 1; i_64_ >= 0; i_64_--) {
			for (int i_65_ = i_0_ - 1; i_65_ >= 0; i_65_--) {
				if (i_65_ >= i_64_ - i_1_ / 2)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[7][2] = is_2_;
		is_2_ = new byte[i_0_ * i_1_];
		i_3_ = 0;
		for (int i_66_ = 0; i_66_ < i_1_; i_66_++) {
			for (int i_67_ = i_0_ - 1; i_67_ >= 0; i_67_--) {
				if (i_67_ >= i_66_ - i_1_ / 2)
					is_2_[i_3_] = (byte) -1;
				i_3_++;
			}
		}
		is[7][3] = is_2_;
		return is;
	}

	public static byte[][][] method4832(int i) {
		byte[][][] is = new byte[8][4][];
		int i_68_ = i;
		int i_69_ = i;
		byte[] is_70_ = new byte[i_68_ * i_69_];
		int i_71_ = 0;
		for (int i_72_ = 0; i_72_ < i_69_; i_72_++) {
			for (int i_73_ = 0; i_73_ < i_68_; i_73_++) {
				if (i_73_ <= i_72_)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[0][0] = is_70_;
		is_70_ = new byte[i_69_ * i_68_];
		i_71_ = 0;
		for (int i_74_ = i_69_ - 1; i_74_ >= 0; i_74_--) {
			for (int i_75_ = 0; i_75_ < i_69_; i_75_++) {
				if (i_75_ <= i_74_)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[0][1] = is_70_;
		is_70_ = new byte[i_69_ * i_68_];
		i_71_ = 0;
		for (int i_76_ = 0; i_76_ < i_69_; i_76_++) {
			for (int i_77_ = 0; i_77_ < i_68_; i_77_++) {
				if (i_77_ >= i_76_)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[0][2] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_78_ = i_69_ - 1; i_78_ >= 0; i_78_--) {
			for (int i_79_ = 0; i_79_ < i_68_; i_79_++) {
				if (i_79_ >= i_78_)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[0][3] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_80_ = i_69_ - 1; i_80_ >= 0; i_80_--) {
			for (int i_81_ = 0; i_81_ < i_68_; i_81_++) {
				if (i_81_ <= i_80_ >> 1)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[1][0] = is_70_;
		is_70_ = new byte[i_69_ * i_68_];
		i_71_ = 0;
		for (int i_82_ = 0; i_82_ < i_69_; i_82_++) {
			for (int i_83_ = 0; i_83_ < i_68_; i_83_++) {
				if (i_71_ < 0 || i_71_ >= is_70_.length)
					i_71_++;
				else {
					if (i_83_ >= i_82_ << 1)
						is_70_[i_71_] = (byte) -1;
					i_71_++;
				}
			}
		}
		is[1][1] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_84_ = 0; i_84_ < i_69_; i_84_++) {
			for (int i_85_ = i_68_ - 1; i_85_ >= 0; i_85_--) {
				if (i_85_ <= i_84_ >> 1)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[1][2] = is_70_;
		is_70_ = new byte[i_69_ * i_68_];
		i_71_ = 0;
		for (int i_86_ = i_69_ - 1; i_86_ >= 0; i_86_--) {
			for (int i_87_ = i_68_ - 1; i_87_ >= 0; i_87_--) {
				if (i_87_ >= i_86_ << 1)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[1][3] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_88_ = i_69_ - 1; i_88_ >= 0; i_88_--) {
			for (int i_89_ = i_68_ - 1; i_89_ >= 0; i_89_--) {
				if (i_89_ <= i_88_ >> 1)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[2][0] = is_70_;
		is_70_ = new byte[i_69_ * i_68_];
		i_71_ = 0;
		for (int i_90_ = i_69_ - 1; i_90_ >= 0; i_90_--) {
			for (int i_91_ = 0; i_91_ < i_68_; i_91_++) {
				if (i_91_ >= i_90_ << 1)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[2][1] = is_70_;
		is_70_ = new byte[i_69_ * i_68_];
		i_71_ = 0;
		for (int i_92_ = 0; i_92_ < i_69_; i_92_++) {
			for (int i_93_ = 0; i_93_ < i_68_; i_93_++) {
				if (i_93_ <= i_92_ >> 1)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[2][2] = is_70_;
		is_70_ = new byte[i_69_ * i_68_];
		i_71_ = 0;
		for (int i_94_ = 0; i_94_ < i_69_; i_94_++) {
			for (int i_95_ = i_68_ - 1; i_95_ >= 0; i_95_--) {
				if (i_95_ >= i_94_ << 1)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[2][3] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_96_ = i_69_ - 1; i_96_ >= 0; i_96_--) {
			for (int i_97_ = 0; i_97_ < i_68_; i_97_++) {
				if (i_97_ >= i_96_ >> 1)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[3][0] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_98_ = 0; i_98_ < i_69_; i_98_++) {
			for (int i_99_ = 0; i_99_ < i_68_; i_99_++) {
				if (i_99_ <= i_98_ << 1)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[3][1] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_100_ = 0; i_100_ < i_69_; i_100_++) {
			for (int i_101_ = i_68_ - 1; i_101_ >= 0; i_101_--) {
				if (i_101_ >= i_100_ >> 1)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[3][2] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_102_ = i_69_ - 1; i_102_ >= 0; i_102_--) {
			for (int i_103_ = i_68_ - 1; i_103_ >= 0; i_103_--) {
				if (i_103_ <= i_102_ << 1)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[3][3] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_104_ = i_69_ - 1; i_104_ >= 0; i_104_--) {
			for (int i_105_ = i_68_ - 1; i_105_ >= 0; i_105_--) {
				if (i_105_ >= i_104_ >> 1)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[4][0] = is_70_;
		is_70_ = new byte[i_69_ * i_68_];
		i_71_ = 0;
		for (int i_106_ = i_69_ - 1; i_106_ >= 0; i_106_--) {
			for (int i_107_ = 0; i_107_ < i_68_; i_107_++) {
				if (i_107_ <= i_106_ << 1)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[4][1] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_108_ = 0; i_108_ < i_69_; i_108_++) {
			for (int i_109_ = 0; i_109_ < i_68_; i_109_++) {
				if (i_109_ >= i_108_ >> 1)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[4][2] = is_70_;
		is_70_ = new byte[i_69_ * i_68_];
		i_71_ = 0;
		for (int i_110_ = 0; i_110_ < i_69_; i_110_++) {
			for (int i_111_ = i_68_ - 1; i_111_ >= 0; i_111_--) {
				if (i_111_ <= i_110_ << 1)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[4][3] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_112_ = 0; i_112_ < i_69_; i_112_++) {
			for (int i_113_ = 0; i_113_ < i_68_; i_113_++) {
				if (i_113_ <= i_68_ / 2)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[5][0] = is_70_;
		is_70_ = new byte[i_69_ * i_68_];
		i_71_ = 0;
		for (int i_114_ = 0; i_114_ < i_69_; i_114_++) {
			for (int i_115_ = 0; i_115_ < i_68_; i_115_++) {
				if (i_114_ <= i_69_ / 2)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[5][1] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_116_ = 0; i_116_ < i_69_; i_116_++) {
			for (int i_117_ = 0; i_117_ < i_68_; i_117_++) {
				if (i_117_ >= i_68_ / 2)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[5][2] = is_70_;
		is_70_ = new byte[i_69_ * i_68_];
		i_71_ = 0;
		for (int i_118_ = 0; i_118_ < i_69_; i_118_++) {
			for (int i_119_ = 0; i_119_ < i_68_; i_119_++) {
				if (i_118_ >= i_69_ / 2)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[5][3] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_120_ = 0; i_120_ < i_69_; i_120_++) {
			for (int i_121_ = 0; i_121_ < i_68_; i_121_++) {
				if (i_121_ <= i_120_ - i_69_ / 2)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[6][0] = is_70_;
		is_70_ = new byte[i_69_ * i_68_];
		i_71_ = 0;
		for (int i_122_ = i_69_ - 1; i_122_ >= 0; i_122_--) {
			for (int i_123_ = 0; i_123_ < i_68_; i_123_++) {
				if (i_123_ <= i_122_ - i_69_ / 2)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[6][1] = is_70_;
		is_70_ = new byte[i_69_ * i_68_];
		i_71_ = 0;
		for (int i_124_ = i_69_ - 1; i_124_ >= 0; i_124_--) {
			for (int i_125_ = i_68_ - 1; i_125_ >= 0; i_125_--) {
				if (i_125_ <= i_124_ - i_69_ / 2)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[6][2] = is_70_;
		is_70_ = new byte[i_69_ * i_68_];
		i_71_ = 0;
		for (int i_126_ = 0; i_126_ < i_69_; i_126_++) {
			for (int i_127_ = i_68_ - 1; i_127_ >= 0; i_127_--) {
				if (i_127_ <= i_126_ - i_69_ / 2)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[6][3] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_128_ = 0; i_128_ < i_69_; i_128_++) {
			for (int i_129_ = 0; i_129_ < i_68_; i_129_++) {
				if (i_129_ >= i_128_ - i_69_ / 2)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[7][0] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_130_ = i_69_ - 1; i_130_ >= 0; i_130_--) {
			for (int i_131_ = 0; i_131_ < i_68_; i_131_++) {
				if (i_131_ >= i_130_ - i_69_ / 2)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[7][1] = is_70_;
		is_70_ = new byte[i_69_ * i_68_];
		i_71_ = 0;
		for (int i_132_ = i_69_ - 1; i_132_ >= 0; i_132_--) {
			for (int i_133_ = i_68_ - 1; i_133_ >= 0; i_133_--) {
				if (i_133_ >= i_132_ - i_69_ / 2)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[7][2] = is_70_;
		is_70_ = new byte[i_68_ * i_69_];
		i_71_ = 0;
		for (int i_134_ = 0; i_134_ < i_69_; i_134_++) {
			for (int i_135_ = i_68_ - 1; i_135_ >= 0; i_135_--) {
				if (i_135_ >= i_134_ - i_69_ / 2)
					is_70_[i_71_] = (byte) -1;
				i_71_++;
			}
		}
		is[7][3] = is_70_;
		return is;
	}

	static void method4833(Class505 class505, byte[][][] is, int i, int i_136_, int i_137_, int i_138_, int i_139_, int i_140_, int i_141_, int i_142_, int i_143_, int i_144_) {
		if (i_142_ != 0 && i != 0) {
			if (9 == i_142_) {
				i_142_ = 1;
				i_143_ = i_143_ + 1 & 0x3;
			}
			if (10 == i_142_) {
				i_142_ = 1;
				i_143_ = 3 + i_143_ & 0x3;
			}
			if (i_142_ == 11) {
				i_142_ = 8;
				i_143_ = 3 + i_143_ & 0x3;
			}
			class505.N(i_136_, i_137_, i_140_, i_141_, i_138_, i_139_, is[i_142_ - 1][i_143_], i, i_144_);
		}
	}

	static void method4834(Class505 class505, byte[][][] is, int i, int i_145_, int i_146_, int i_147_, int i_148_, int i_149_, int i_150_, int i_151_, int i_152_, int i_153_) {
		if (i_151_ != 0 && i != 0) {
			if (9 == i_151_) {
				i_151_ = 1;
				i_152_ = i_152_ + 1 & 0x3;
			}
			if (10 == i_151_) {
				i_151_ = 1;
				i_152_ = 3 + i_152_ & 0x3;
			}
			if (i_151_ == 11) {
				i_151_ = 8;
				i_152_ = 3 + i_152_ & 0x3;
			}
			class505.N(i_145_, i_146_, i_149_, i_150_, i_147_, i_148_, is[i_151_ - 1][i_152_], i, i_153_);
		}
	}

	public static byte[][][] method4835(int i) {
		byte[][][] is = new byte[8][4][];
		int i_154_ = i;
		int i_155_ = i;
		byte[] is_156_ = new byte[i_154_ * i_155_];
		int i_157_ = 0;
		for (int i_158_ = 0; i_158_ < i_155_; i_158_++) {
			for (int i_159_ = 0; i_159_ < i_154_; i_159_++) {
				if (i_159_ <= i_158_)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[0][0] = is_156_;
		is_156_ = new byte[i_155_ * i_154_];
		i_157_ = 0;
		for (int i_160_ = i_155_ - 1; i_160_ >= 0; i_160_--) {
			for (int i_161_ = 0; i_161_ < i_155_; i_161_++) {
				if (i_161_ <= i_160_)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[0][1] = is_156_;
		is_156_ = new byte[i_155_ * i_154_];
		i_157_ = 0;
		for (int i_162_ = 0; i_162_ < i_155_; i_162_++) {
			for (int i_163_ = 0; i_163_ < i_154_; i_163_++) {
				if (i_163_ >= i_162_)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[0][2] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_164_ = i_155_ - 1; i_164_ >= 0; i_164_--) {
			for (int i_165_ = 0; i_165_ < i_154_; i_165_++) {
				if (i_165_ >= i_164_)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[0][3] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_166_ = i_155_ - 1; i_166_ >= 0; i_166_--) {
			for (int i_167_ = 0; i_167_ < i_154_; i_167_++) {
				if (i_167_ <= i_166_ >> 1)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[1][0] = is_156_;
		is_156_ = new byte[i_155_ * i_154_];
		i_157_ = 0;
		for (int i_168_ = 0; i_168_ < i_155_; i_168_++) {
			for (int i_169_ = 0; i_169_ < i_154_; i_169_++) {
				if (i_157_ < 0 || i_157_ >= is_156_.length)
					i_157_++;
				else {
					if (i_169_ >= i_168_ << 1)
						is_156_[i_157_] = (byte) -1;
					i_157_++;
				}
			}
		}
		is[1][1] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_170_ = 0; i_170_ < i_155_; i_170_++) {
			for (int i_171_ = i_154_ - 1; i_171_ >= 0; i_171_--) {
				if (i_171_ <= i_170_ >> 1)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[1][2] = is_156_;
		is_156_ = new byte[i_155_ * i_154_];
		i_157_ = 0;
		for (int i_172_ = i_155_ - 1; i_172_ >= 0; i_172_--) {
			for (int i_173_ = i_154_ - 1; i_173_ >= 0; i_173_--) {
				if (i_173_ >= i_172_ << 1)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[1][3] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_174_ = i_155_ - 1; i_174_ >= 0; i_174_--) {
			for (int i_175_ = i_154_ - 1; i_175_ >= 0; i_175_--) {
				if (i_175_ <= i_174_ >> 1)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[2][0] = is_156_;
		is_156_ = new byte[i_155_ * i_154_];
		i_157_ = 0;
		for (int i_176_ = i_155_ - 1; i_176_ >= 0; i_176_--) {
			for (int i_177_ = 0; i_177_ < i_154_; i_177_++) {
				if (i_177_ >= i_176_ << 1)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[2][1] = is_156_;
		is_156_ = new byte[i_155_ * i_154_];
		i_157_ = 0;
		for (int i_178_ = 0; i_178_ < i_155_; i_178_++) {
			for (int i_179_ = 0; i_179_ < i_154_; i_179_++) {
				if (i_179_ <= i_178_ >> 1)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[2][2] = is_156_;
		is_156_ = new byte[i_155_ * i_154_];
		i_157_ = 0;
		for (int i_180_ = 0; i_180_ < i_155_; i_180_++) {
			for (int i_181_ = i_154_ - 1; i_181_ >= 0; i_181_--) {
				if (i_181_ >= i_180_ << 1)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[2][3] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_182_ = i_155_ - 1; i_182_ >= 0; i_182_--) {
			for (int i_183_ = 0; i_183_ < i_154_; i_183_++) {
				if (i_183_ >= i_182_ >> 1)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[3][0] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_184_ = 0; i_184_ < i_155_; i_184_++) {
			for (int i_185_ = 0; i_185_ < i_154_; i_185_++) {
				if (i_185_ <= i_184_ << 1)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[3][1] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_186_ = 0; i_186_ < i_155_; i_186_++) {
			for (int i_187_ = i_154_ - 1; i_187_ >= 0; i_187_--) {
				if (i_187_ >= i_186_ >> 1)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[3][2] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_188_ = i_155_ - 1; i_188_ >= 0; i_188_--) {
			for (int i_189_ = i_154_ - 1; i_189_ >= 0; i_189_--) {
				if (i_189_ <= i_188_ << 1)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[3][3] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_190_ = i_155_ - 1; i_190_ >= 0; i_190_--) {
			for (int i_191_ = i_154_ - 1; i_191_ >= 0; i_191_--) {
				if (i_191_ >= i_190_ >> 1)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[4][0] = is_156_;
		is_156_ = new byte[i_155_ * i_154_];
		i_157_ = 0;
		for (int i_192_ = i_155_ - 1; i_192_ >= 0; i_192_--) {
			for (int i_193_ = 0; i_193_ < i_154_; i_193_++) {
				if (i_193_ <= i_192_ << 1)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[4][1] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_194_ = 0; i_194_ < i_155_; i_194_++) {
			for (int i_195_ = 0; i_195_ < i_154_; i_195_++) {
				if (i_195_ >= i_194_ >> 1)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[4][2] = is_156_;
		is_156_ = new byte[i_155_ * i_154_];
		i_157_ = 0;
		for (int i_196_ = 0; i_196_ < i_155_; i_196_++) {
			for (int i_197_ = i_154_ - 1; i_197_ >= 0; i_197_--) {
				if (i_197_ <= i_196_ << 1)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[4][3] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_198_ = 0; i_198_ < i_155_; i_198_++) {
			for (int i_199_ = 0; i_199_ < i_154_; i_199_++) {
				if (i_199_ <= i_154_ / 2)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[5][0] = is_156_;
		is_156_ = new byte[i_155_ * i_154_];
		i_157_ = 0;
		for (int i_200_ = 0; i_200_ < i_155_; i_200_++) {
			for (int i_201_ = 0; i_201_ < i_154_; i_201_++) {
				if (i_200_ <= i_155_ / 2)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[5][1] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_202_ = 0; i_202_ < i_155_; i_202_++) {
			for (int i_203_ = 0; i_203_ < i_154_; i_203_++) {
				if (i_203_ >= i_154_ / 2)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[5][2] = is_156_;
		is_156_ = new byte[i_155_ * i_154_];
		i_157_ = 0;
		for (int i_204_ = 0; i_204_ < i_155_; i_204_++) {
			for (int i_205_ = 0; i_205_ < i_154_; i_205_++) {
				if (i_204_ >= i_155_ / 2)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[5][3] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_206_ = 0; i_206_ < i_155_; i_206_++) {
			for (int i_207_ = 0; i_207_ < i_154_; i_207_++) {
				if (i_207_ <= i_206_ - i_155_ / 2)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[6][0] = is_156_;
		is_156_ = new byte[i_155_ * i_154_];
		i_157_ = 0;
		for (int i_208_ = i_155_ - 1; i_208_ >= 0; i_208_--) {
			for (int i_209_ = 0; i_209_ < i_154_; i_209_++) {
				if (i_209_ <= i_208_ - i_155_ / 2)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[6][1] = is_156_;
		is_156_ = new byte[i_155_ * i_154_];
		i_157_ = 0;
		for (int i_210_ = i_155_ - 1; i_210_ >= 0; i_210_--) {
			for (int i_211_ = i_154_ - 1; i_211_ >= 0; i_211_--) {
				if (i_211_ <= i_210_ - i_155_ / 2)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[6][2] = is_156_;
		is_156_ = new byte[i_155_ * i_154_];
		i_157_ = 0;
		for (int i_212_ = 0; i_212_ < i_155_; i_212_++) {
			for (int i_213_ = i_154_ - 1; i_213_ >= 0; i_213_--) {
				if (i_213_ <= i_212_ - i_155_ / 2)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[6][3] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_214_ = 0; i_214_ < i_155_; i_214_++) {
			for (int i_215_ = 0; i_215_ < i_154_; i_215_++) {
				if (i_215_ >= i_214_ - i_155_ / 2)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[7][0] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_216_ = i_155_ - 1; i_216_ >= 0; i_216_--) {
			for (int i_217_ = 0; i_217_ < i_154_; i_217_++) {
				if (i_217_ >= i_216_ - i_155_ / 2)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[7][1] = is_156_;
		is_156_ = new byte[i_155_ * i_154_];
		i_157_ = 0;
		for (int i_218_ = i_155_ - 1; i_218_ >= 0; i_218_--) {
			for (int i_219_ = i_154_ - 1; i_219_ >= 0; i_219_--) {
				if (i_219_ >= i_218_ - i_155_ / 2)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[7][2] = is_156_;
		is_156_ = new byte[i_154_ * i_155_];
		i_157_ = 0;
		for (int i_220_ = 0; i_220_ < i_155_; i_220_++) {
			for (int i_221_ = i_154_ - 1; i_221_ >= 0; i_221_--) {
				if (i_221_ >= i_220_ - i_155_ / 2)
					is_156_[i_157_] = (byte) -1;
				i_157_++;
			}
		}
		is[7][3] = is_156_;
		return is;
	}

	Class272() throws Throwable {
		throw new Error();
	}

	static void method4836(Class505 class505, byte[][][] is, int i, int i_222_, int i_223_, int i_224_, int i_225_, int i_226_, int i_227_, int i_228_, int i_229_, int i_230_) {
		if (i_228_ != 0 && i != 0) {
			if (9 == i_228_) {
				i_228_ = 1;
				i_229_ = i_229_ + 1 & 0x3;
			}
			if (10 == i_228_) {
				i_228_ = 1;
				i_229_ = 3 + i_229_ & 0x3;
			}
			if (i_228_ == 11) {
				i_228_ = 8;
				i_229_ = 3 + i_229_ & 0x3;
			}
			class505.N(i_222_, i_223_, i_226_, i_227_, i_224_, i_225_, is[i_228_ - 1][i_229_], i, i_230_);
		}
	}

	public static byte[][][] method4837(int i) {
		byte[][][] is = new byte[8][4][];
		int i_231_ = i;
		int i_232_ = i;
		byte[] is_233_ = new byte[i_231_ * i_232_];
		int i_234_ = 0;
		for (int i_235_ = 0; i_235_ < i_232_; i_235_++) {
			for (int i_236_ = 0; i_236_ < i_231_; i_236_++) {
				if (i_236_ <= i_235_)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[0][0] = is_233_;
		is_233_ = new byte[i_232_ * i_231_];
		i_234_ = 0;
		for (int i_237_ = i_232_ - 1; i_237_ >= 0; i_237_--) {
			for (int i_238_ = 0; i_238_ < i_232_; i_238_++) {
				if (i_238_ <= i_237_)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[0][1] = is_233_;
		is_233_ = new byte[i_232_ * i_231_];
		i_234_ = 0;
		for (int i_239_ = 0; i_239_ < i_232_; i_239_++) {
			for (int i_240_ = 0; i_240_ < i_231_; i_240_++) {
				if (i_240_ >= i_239_)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[0][2] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_241_ = i_232_ - 1; i_241_ >= 0; i_241_--) {
			for (int i_242_ = 0; i_242_ < i_231_; i_242_++) {
				if (i_242_ >= i_241_)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[0][3] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_243_ = i_232_ - 1; i_243_ >= 0; i_243_--) {
			for (int i_244_ = 0; i_244_ < i_231_; i_244_++) {
				if (i_244_ <= i_243_ >> 1)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[1][0] = is_233_;
		is_233_ = new byte[i_232_ * i_231_];
		i_234_ = 0;
		for (int i_245_ = 0; i_245_ < i_232_; i_245_++) {
			for (int i_246_ = 0; i_246_ < i_231_; i_246_++) {
				if (i_234_ < 0 || i_234_ >= is_233_.length)
					i_234_++;
				else {
					if (i_246_ >= i_245_ << 1)
						is_233_[i_234_] = (byte) -1;
					i_234_++;
				}
			}
		}
		is[1][1] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_247_ = 0; i_247_ < i_232_; i_247_++) {
			for (int i_248_ = i_231_ - 1; i_248_ >= 0; i_248_--) {
				if (i_248_ <= i_247_ >> 1)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[1][2] = is_233_;
		is_233_ = new byte[i_232_ * i_231_];
		i_234_ = 0;
		for (int i_249_ = i_232_ - 1; i_249_ >= 0; i_249_--) {
			for (int i_250_ = i_231_ - 1; i_250_ >= 0; i_250_--) {
				if (i_250_ >= i_249_ << 1)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[1][3] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_251_ = i_232_ - 1; i_251_ >= 0; i_251_--) {
			for (int i_252_ = i_231_ - 1; i_252_ >= 0; i_252_--) {
				if (i_252_ <= i_251_ >> 1)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[2][0] = is_233_;
		is_233_ = new byte[i_232_ * i_231_];
		i_234_ = 0;
		for (int i_253_ = i_232_ - 1; i_253_ >= 0; i_253_--) {
			for (int i_254_ = 0; i_254_ < i_231_; i_254_++) {
				if (i_254_ >= i_253_ << 1)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[2][1] = is_233_;
		is_233_ = new byte[i_232_ * i_231_];
		i_234_ = 0;
		for (int i_255_ = 0; i_255_ < i_232_; i_255_++) {
			for (int i_256_ = 0; i_256_ < i_231_; i_256_++) {
				if (i_256_ <= i_255_ >> 1)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[2][2] = is_233_;
		is_233_ = new byte[i_232_ * i_231_];
		i_234_ = 0;
		for (int i_257_ = 0; i_257_ < i_232_; i_257_++) {
			for (int i_258_ = i_231_ - 1; i_258_ >= 0; i_258_--) {
				if (i_258_ >= i_257_ << 1)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[2][3] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_259_ = i_232_ - 1; i_259_ >= 0; i_259_--) {
			for (int i_260_ = 0; i_260_ < i_231_; i_260_++) {
				if (i_260_ >= i_259_ >> 1)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[3][0] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_261_ = 0; i_261_ < i_232_; i_261_++) {
			for (int i_262_ = 0; i_262_ < i_231_; i_262_++) {
				if (i_262_ <= i_261_ << 1)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[3][1] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_263_ = 0; i_263_ < i_232_; i_263_++) {
			for (int i_264_ = i_231_ - 1; i_264_ >= 0; i_264_--) {
				if (i_264_ >= i_263_ >> 1)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[3][2] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_265_ = i_232_ - 1; i_265_ >= 0; i_265_--) {
			for (int i_266_ = i_231_ - 1; i_266_ >= 0; i_266_--) {
				if (i_266_ <= i_265_ << 1)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[3][3] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_267_ = i_232_ - 1; i_267_ >= 0; i_267_--) {
			for (int i_268_ = i_231_ - 1; i_268_ >= 0; i_268_--) {
				if (i_268_ >= i_267_ >> 1)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[4][0] = is_233_;
		is_233_ = new byte[i_232_ * i_231_];
		i_234_ = 0;
		for (int i_269_ = i_232_ - 1; i_269_ >= 0; i_269_--) {
			for (int i_270_ = 0; i_270_ < i_231_; i_270_++) {
				if (i_270_ <= i_269_ << 1)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[4][1] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_271_ = 0; i_271_ < i_232_; i_271_++) {
			for (int i_272_ = 0; i_272_ < i_231_; i_272_++) {
				if (i_272_ >= i_271_ >> 1)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[4][2] = is_233_;
		is_233_ = new byte[i_232_ * i_231_];
		i_234_ = 0;
		for (int i_273_ = 0; i_273_ < i_232_; i_273_++) {
			for (int i_274_ = i_231_ - 1; i_274_ >= 0; i_274_--) {
				if (i_274_ <= i_273_ << 1)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[4][3] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_275_ = 0; i_275_ < i_232_; i_275_++) {
			for (int i_276_ = 0; i_276_ < i_231_; i_276_++) {
				if (i_276_ <= i_231_ / 2)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[5][0] = is_233_;
		is_233_ = new byte[i_232_ * i_231_];
		i_234_ = 0;
		for (int i_277_ = 0; i_277_ < i_232_; i_277_++) {
			for (int i_278_ = 0; i_278_ < i_231_; i_278_++) {
				if (i_277_ <= i_232_ / 2)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[5][1] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_279_ = 0; i_279_ < i_232_; i_279_++) {
			for (int i_280_ = 0; i_280_ < i_231_; i_280_++) {
				if (i_280_ >= i_231_ / 2)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[5][2] = is_233_;
		is_233_ = new byte[i_232_ * i_231_];
		i_234_ = 0;
		for (int i_281_ = 0; i_281_ < i_232_; i_281_++) {
			for (int i_282_ = 0; i_282_ < i_231_; i_282_++) {
				if (i_281_ >= i_232_ / 2)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[5][3] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_283_ = 0; i_283_ < i_232_; i_283_++) {
			for (int i_284_ = 0; i_284_ < i_231_; i_284_++) {
				if (i_284_ <= i_283_ - i_232_ / 2)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[6][0] = is_233_;
		is_233_ = new byte[i_232_ * i_231_];
		i_234_ = 0;
		for (int i_285_ = i_232_ - 1; i_285_ >= 0; i_285_--) {
			for (int i_286_ = 0; i_286_ < i_231_; i_286_++) {
				if (i_286_ <= i_285_ - i_232_ / 2)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[6][1] = is_233_;
		is_233_ = new byte[i_232_ * i_231_];
		i_234_ = 0;
		for (int i_287_ = i_232_ - 1; i_287_ >= 0; i_287_--) {
			for (int i_288_ = i_231_ - 1; i_288_ >= 0; i_288_--) {
				if (i_288_ <= i_287_ - i_232_ / 2)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[6][2] = is_233_;
		is_233_ = new byte[i_232_ * i_231_];
		i_234_ = 0;
		for (int i_289_ = 0; i_289_ < i_232_; i_289_++) {
			for (int i_290_ = i_231_ - 1; i_290_ >= 0; i_290_--) {
				if (i_290_ <= i_289_ - i_232_ / 2)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[6][3] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_291_ = 0; i_291_ < i_232_; i_291_++) {
			for (int i_292_ = 0; i_292_ < i_231_; i_292_++) {
				if (i_292_ >= i_291_ - i_232_ / 2)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[7][0] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_293_ = i_232_ - 1; i_293_ >= 0; i_293_--) {
			for (int i_294_ = 0; i_294_ < i_231_; i_294_++) {
				if (i_294_ >= i_293_ - i_232_ / 2)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[7][1] = is_233_;
		is_233_ = new byte[i_232_ * i_231_];
		i_234_ = 0;
		for (int i_295_ = i_232_ - 1; i_295_ >= 0; i_295_--) {
			for (int i_296_ = i_231_ - 1; i_296_ >= 0; i_296_--) {
				if (i_296_ >= i_295_ - i_232_ / 2)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[7][2] = is_233_;
		is_233_ = new byte[i_231_ * i_232_];
		i_234_ = 0;
		for (int i_297_ = 0; i_297_ < i_232_; i_297_++) {
			for (int i_298_ = i_231_ - 1; i_298_ >= 0; i_298_--) {
				if (i_298_ >= i_297_ - i_232_ / 2)
					is_233_[i_234_] = (byte) -1;
				i_234_++;
			}
		}
		is[7][3] = is_233_;
		return is;
	}

	static final void method4838(Class527 class527, short i) {
		int i_299_ = (((Class527) class527).anIntArray6999[(((Class527) class527).anInt7012 -= 141891001) * 1942118537]);
		Class118 class118 = Class117.method1981(i_299_, (byte) 10);
		Class98 class98 = Class468_Sub8.aClass98Array7889[i_299_ >> 16];
		Class220.method3738(class118, class98, class527, (byte) -2);
	}

	static final void method4839(Class527 class527, byte i) {
		((Class527) class527).anInt7012 -= 141891001;
		int i_300_ = (((Class527) class527).anIntArray6999[((Class527) class527).anInt7012 * 1942118537]);
		Class282_Sub44 class282_sub44 = (Class282_Sub44) client.aClass465_7442.method7754((long) i_300_);
		if (null != class282_sub44 && -1517697923 * class282_sub44.anInt8062 == 3)
			Class351.method6196(class282_sub44, true, true, -1932930202);
	}

	public static int method4840(CharSequence charsequence, byte i) {
		int i_301_ = charsequence.length();
		int i_302_ = 0;
		for (int i_303_ = 0; i_303_ < i_301_; i_303_++)
			i_302_ = (i_302_ << 5) - i_302_ + charsequence.charAt(i_303_);
		return i_302_;
	}

	static boolean method4841(CharSequence charsequence, int i, boolean bool, int i_304_) {
		if (i < 2 || i > 36)
			throw new IllegalArgumentException(new StringBuilder().append("").append(i).toString());
		boolean bool_305_ = false;
		boolean bool_306_ = false;
		int i_307_ = 0;
		int i_308_ = charsequence.length();
		for (int i_309_ = 0; i_309_ < i_308_; i_309_++) {
			int i_310_ = charsequence.charAt(i_309_);
			if (0 == i_309_) {
				if (45 == i_310_) {
					bool_305_ = true;
					continue;
				}
				if (i_310_ == 43 && bool)
					continue;
			}
			if (i_310_ >= 48 && i_310_ <= 57)
				i_310_ -= 48;
			else if (i_310_ >= 65 && i_310_ <= 90)
				i_310_ -= 55;
			else if (i_310_ >= 97 && i_310_ <= 122)
				i_310_ -= 87;
			else
				return false;
			if (i_310_ >= i)
				return false;
			if (bool_305_)
				i_310_ = -i_310_;
			int i_311_ = i_310_ + i_307_ * i;
			if (i_307_ != i_311_ / i)
				return false;
			i_307_ = i_311_;
			bool_306_ = true;
		}
		return bool_306_;
	}
}
